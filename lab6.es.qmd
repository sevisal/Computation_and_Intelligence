---
title: "Sesi√≥n de laboratorio 6: Sistemas de Recomendaci√≥n"
format:
    html:
        toc: true
        toc-depth: 5
        toc-location: left
        toc-title: "**Contents**"
---

# Objetivos de la sesi√≥n

::: {.objective-card}
üéØ **Objetivo General:** Entender las ideas fundamentales detr√°s de los sistemas de recomendaci√≥n y aprender a dise√±ar, implementar y evaluar modelos de recomendaci√≥n sencillos usando Orange. Explorar√°s diferentes enfoques ‚Äî basados en popularidad, basados en contenido y filtrado colaborativo ‚Äî y comparar√°s sus ventajas y limitaciones.
:::

![](_resources/images/recommend.jpg){.img-right}

Los sistemas de recomendaci√≥n son los motores invisibles que personalizan nuestras experiencias digitales. Gu√≠an lo que vemos en Netflix, lo que compramos en Amazon y lo que leemos en Goodreads. Al aprender las preferencias de los usuarios y las relaciones entre √≠tems, estos sistemas predicen qu√© elementos son m√°s relevantes para cada usuario, aumentando tanto la satisfacci√≥n como el engagement.

En este laboratorio vas a:

- Explorar los datos usados para entrenar sistemas de recomendaci√≥n.
- Implementar y evaluar tres estrategias principales de recomendaci√≥n:
    1. **Modelos basados en popularidad**, que sugieren lo que es generalmente popular.
    2. **Filtrado basado en contenido**, que encuentra √≠tems similares a los que un usuario ya prefiere.
    3. **Filtrado colaborativo**, que se basa en la sabidur√≠a de usuarios similares.

Antes de comenzar, aseg√∫rate de tener el entorno de Orange preparado. El complemento `orange3-recommendation` extiende Orange con herramientas espec√≠ficas para construir sistemas de recomendaci√≥n:
```bash
conda activate orange3
pip install orange3-recommendation
```
Este paquete proporciona widgets adicionales para construir sistemas de recomendaci√≥n en Orange.
---

# 1. Exploraci√≥n y preprocesamiento de datos
::: {.objective-card}
üéØ **Objetivo:** Explorar el conjunto de datos para entender su estructura, caracter√≠sticas y problemas potenciales.
:::

![](_resources/images/book.gif){.img-right}
En esta secci√≥n, exploraremos el conjunto de datos de recomendaciones de libros. Este conjunto de datos se ha construido a partir de diferentes usuarios que han calificado varios libros y tu objetivo ser√° poder hacer recomendaciones basadas en esta informaci√≥n.

Carga el conjunto de datos desde el siguiente [enlace](https://github.com/sevisal/Computation_and_Intelligence/blob/main/_resources/data/ratings_encoded.tab) y explora su estructura. Utiliza el widget `File` en Orange para cargar el conjunto de datos y visualizar su contenido utilizando el widget `Data Table`. Visualiza la distribuci√≥n de calificaciones utilizando el widget `Distributions`.

Particiona los datos en conjuntos de entrenamiento y prueba utilizando el widget `Data Sampler`. Esto nos permitir√° evaluar el rendimiento de nuestros sistemas de recomendaci√≥n m√°s adelante.


::: {.question-card}
üìù **Preguntas:**  

1. ¬øCu√°les son las caracter√≠sticas clave del conjunto de datos que se pueden utilizar para construir sistemas de recomendaci√≥n?
2. ¬øC√≥mo podemos manejar los valores faltantes o las inconsistencias en el conjunto de datos?
3. ¬øQu√© podemos inferir de la distribuci√≥n de calificaciones?
:::

---

# 2. Recomendaci√≥n basada en popularidad

::: {.objective-card}
üéØ **Objetivo:** Implementar un sistema de recomendaci√≥n basado en la popularidad y evaluar su rendimiento.
:::

![](_resources/images/rating.png){.img-right}
En esta secci√≥n, implementaremos una forma simple de recomendar libros basada en las calificaciones. Calcularemos cu√°l es el libro m√°s probable que le gustar√≠a a un usuario en funci√≥n de las calificaciones de otros usuarios. Espec√≠ficamente, calcularemos la calificaci√≥n media de cada libro y recomendaremos los libros con las calificaciones medias m√°s altas.

Ten en cuenta que un recomendador basado en popularidad ignora las preferencias individuales de los usuarios.
En lugar de eso, asume que los √≠tems que gustan a muchos usuarios son m√°s propensos a gustarle a un nuevo usuario.

Para hacer esto, utilizaremos el widget `Baselines` en Orange. Pasa los datos de entrenamiento y config√∫ralo para calcular el promedio de usuario como la estrategia de recomendaci√≥n. Luego, conecta la salida a un widget `Predictions` para evaluar su rendimiento con los datos de prueba.

Repite el proceso utilizando la calificaci√≥n media de cada libro como la estrategia de recomendaci√≥n. Compara los resultados de ambos enfoques.

::: {.question-card}
üìù **Preguntas:**

1. ¬øCu√°les son las caracter√≠sticas clave utilizadas en el sistema de recomendaci√≥n basado en la popularidad?
2. ¬øC√≥mo afecta la elecci√≥n de la estrategia de recomendaci√≥n (promedio de usuario vs. promedio de √≠tem) al rendimiento del sistema?
3. ¬øCu√°les son las limitaciones de los sistemas de recomendaci√≥n basados en la popularidad?
:::

---

# 3. Filtrado basado en contenido
::: {.objective-card}
üéØ **Objetivo:** Implementar un sistema de recomendaci√≥n basado en contenido y evaluar su rendimiento.
:::

En esta secci√≥n, implementaremos un sistema de recomendaci√≥n basado en contenido. Este enfoque recomienda elementos en funci√≥n de la similitud entre ellos. Utilizaremos las caracter√≠sticas de los libros (por ejemplo, g√©nero, autor, etc.) para calcular la similitud entre libros. Para hacer esto, consideraremos un escenario en el que el usuario nos dice qu√© libro le gusta y recomendaremos libros similares en funci√≥n de esa informaci√≥n.

![](_resources/images/genre.jpg){.img-center}

Para implementar esto, utilizaremos las caracter√≠sticas de los libros, disponibles [aqu√≠](https://github.com/sevisal/Computation_and_Intelligence/blob/main/_resources/data/books_genres.tab), y las cargaremos en Orange utilizando el widget `File`. Luego, utilizaremos el widget `Distance` para calcular la similitud entre libros en funci√≥n de sus caracter√≠sticas. Puedes visualizar la matriz de similitud utilizando el widget `Distance matrix`.

A continuaci√≥n, utilizaremos el widget `Python Script` para crear una funci√≥n de recomendaci√≥n personalizada que tome un libro y recomiende libros similares en funci√≥n de la matriz de similitud. Para ello, tendremos que pasar como entrada al modelo la matriz de similitud y los datos de todos los libros que hemos cargado con el widget `File`. El c√≥digo en Python puede ser el siguiente:

```python
import numpy as np

# --- Choose the book you want to query ---
book_title = "Harry Potter and the Goblet of Fire (Book 4)"   # You can change this to any book in the dataset

# --- Inputs from Orange ---
data = in_data               # Orange Table
dist = np.array(in_object)   # DistMatrix as NumPy array

# Extract book titles from metas (adjust the field name if needed)
book_names = [str(inst["title"]) if "title" in data.domain else str(inst.metas[0]) for inst in data]

# Try to find the index of the chosen book
try:
    idx = book_names.index(book_title)
except ValueError:
    print(f"‚ùå Book '{book_title}' not found!")
    idx = None

if idx is not None:
    # Get distances from this book to all others
    distances = dist[idx]

    # Find the 5 nearest (excluding itself)
    nearest_idx = np.argsort(distances)[1:6]

    print(f"\nüìö 5 most similar to '{book_title}':\n")
    for i in nearest_idx:
        print(f"  {book_names[i]}  (distance = {distances[i]:.3f})")
```

Prueba la funci√≥n con diferentes libros y observa las recomendaciones generadas.

::: {.question-card}
üìù **Preguntas:**

1. ¬øCu√°les son las caracter√≠sticas clave utilizadas en el sistema de recomendaci√≥n basado en contenido?
2. ¬øC√≥mo afecta la elecci√≥n de la m√©trica de similitud a las recomendaciones?
3. ¬øCu√°les son las limitaciones de los sistemas de recomendaci√≥n basados en contenido?
:::

---

# 4. Filtrado colaborativo
::: {.objective-card}
üéØ **Objetivo:** Implementar un sistema de recomendaci√≥n basado en filtrado colaborativo y evaluar su rendimiento.
:::

![](_resources/images/collaboration.gif){.img-right}
Finalmente, implementaremos un sistema de recomendaci√≥n basado en filtrado colaborativo. Este enfoque recomienda elementos en funci√≥n de las preferencias de usuarios similares. Utilizaremos las calificaciones dadas por los usuarios para encontrar usuarios similares y recomendar libros que esos usuarios hayan disfrutado.

Aqu√≠ nos centraremos en un tipo de filtrado colaborativo llamado factorizaci√≥n de matrices. Este m√©todo descompone la matriz de interacci√≥n usuario-elemento en dos matrices de menor dimensi√≥n, una que representa a los usuarios y otra que representa a los elementos. El producto punto de estas matrices se puede utilizar para predecir calificaciones faltantes:
$$
R \approx P \cdot Q^T,
$$
donde \(R\) es la matriz de interacci√≥n original usuario-elemento, \(P\) es la matriz de caracter√≠sticas del usuario y \(Q\) es la matriz de caracter√≠sticas del elemento.

Para implementar esto, utilizaremos el widget `BRISMF` en Orange. Pasa los datos de entrenamiento al widget y configura sus par√°metros (por ejemplo, n√∫mero de factores, regularizaci√≥n). Luego, conecta la salida a un widget de `Predictions` para evaluar su rendimiento con los datos de prueba.

Tambi√©n podemos visualizar las caracter√≠sticas latentes aprendidas por el modelo utilizando la representaci√≥n de baja dimensi√≥n de usuarios y elementos. Utiliza el widget `t-SNE` para reducir la dimensionalidad de la matriz de caracter√≠sticas del elemento (matriz \(Q\)) y visualizarla.


::: {.question-card}
üìù **Preguntas:**

1. ¬øCu√°les son las caracter√≠sticas clave utilizadas en el sistema de filtrado colaborativo?
2. ¬øC√≥mo mejora la factorizaci√≥n de matrices las recomendaciones?
3. ¬øCu√°les son las limitaciones de los sistemas de filtrado colaborativo?
:::

---

# 5. Recomendaci√≥n usando Surprise
::: {.objective-card}
üéØ **Objetivo:** Implementar un sistema de recomendaci√≥n usando la biblioteca Surprise y evaluar su rendimiento.
:::

![](_resources/images/surprise.gif){.img-right style="width:180px"}
En esta secci√≥n, implementaremos un sistema de recomendaci√≥n usando la biblioteca [Surprise](http://surpriselib.com/), que es un scikit de Python para construir y analizar sistemas de recomendaci√≥n. Surprise proporciona varios algoritmos para filtrado colaborativo, incluidas t√©cnicas de factorizaci√≥n de matrices como SVD.

Para usar Surprise dentro de Orange, podemos utilizar el widget `Python Script`. A continuaci√≥n se muestra un c√≥digo de ejemplo que demuestra c√≥mo usar Surprise para construir un modelo de recomendaci√≥n utilizando el algoritmo SVD. Este c√≥digo asume que los datos de entrada han sido preprocesados y contienen las columnas necesarias: userID, bookID y rating.

```python
# --- Imports ---
import pandas as pd
from surprise import Reader, Dataset, SVD
from surprise.model_selection import cross_validate

# --- Extract data from Orange input ---
# in_data is an Orange Table object automatically provided by Orange
# We need to convert it to a pandas DataFrame
df = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])

# If the target variable (rating) is in Y:
if in_data.domain.has_continuous_class or in_data.domain.has_discrete_class:
    df["rating"] = in_data.Y

# If userID and bookID are stored as metas:
for i, var in enumerate(in_data.domain.metas):
    df[var.name] = [str(val) for val in in_data.metas[:, i]]

# --- Inspect your dataframe ---
print(df.head())

# Make sure it has columns: userID, bookID, rating
# If not, rename accordingly
df = df.rename(columns={
    "userID": "userID",
    "bookID": "bookID",
    "rating": "bookRating"
})

# --- Prepare the Surprise dataset ---
reader = Reader(rating_scale=(1, 10))
data = Dataset.load_from_df(df[["userID", "bookID", "bookRating"]], reader)

# --- Train a simple model using SVD ---
algo = SVD()

# Evaluate with 3-fold cross-validation
results = cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

print("\n‚úÖ Cross-validation results:")
for key, value in results.items():
    print(f"{key}: {value}")
```

Puedes modificar el c√≥digo para experimentar con diferentes algoritmos proporcionados por Surprise, como KNNBasic, NMF, etc. Adem√°s, puedes ajustar los hiperpar√°metros para mejorar el rendimiento del modelo.

---

# Nota final

::: {.final-note-card}
‚ú® Enhorabuena por completar la sesi√≥n de laboratorio sobre sistemas de recomendaci√≥n. Has explorado varias t√©cnicas para construir sistemas de recomendaci√≥n, incluidas recomendaciones basadas en popularidad, filtrado basado en contenido y filtrado colaborativo. Cada m√©todo tiene sus fortalezas y limitaciones, y comprender estas caracter√≠sticas te ayudar√° a elegir el enfoque adecuado para diferentes escenarios.
:::


::: {.margin}
# Explora los Laboratorios {.unnumbered .unlisted}
{{< include lab-cards.es.qmd >}}
:::